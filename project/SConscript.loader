# pylint: disable=E0602

import os

CCFLAGS_MOD = ''
CPPPATH_MOD = []
CPPDEFINES_MOD = []
SOURCE_MOD = []

# modtrezorcrypto
CCFLAGS_MOD += '-Wno-sequence-point '
CPPPATH_MOD += [
    'vendor/trezor-crypto',
]
CPPDEFINES_MOD += [
    'AES_128',
    'AES_192',
    'USE_KECCAK',
    'ED25519_NO_PRECOMP',
]
SOURCE_MOD += [
    '../loader/blake2s.c',
    '../loader/curve25519-donna-32bit.c',
    '../loader/curve25519-donna-helpers.c',
    '../loader/ed25519.c',
    '../loader/ed25519-donna-32bit-tables.c',
    '../loader/ed25519-donna-impl-base.c',
    '../loader/modm-donna-32bit.c',
    '../loader/memzero.c',
    '../loader/sha2.c',
]

SOURCE_STMHAL = [
    '../drivers/Src/stm32f1xx_hal_cortex.c',
    '../drivers/Src/stm32f1xx_hal_flash_ex.c',
    '../drivers/Src/stm32f1xx_hal_flash.c',
    '../drivers/Src/stm32f1xx_hal_gpio.c',
    '../drivers/Src/stm32f1xx_hal_i2c.c',
    '../drivers/Src/stm32f1xx_hal_pcd_ex.c',
    '../drivers/Src/stm32f1xx_hal_pcd.c',
    '../drivers/Src/stm32f1xx_hal_pwr.c',
    '../drivers/Src/stm32f1xx_hal_rcc.c',
    '../drivers/Src/stm32f1xx_hal_sd.c',
    '../drivers/Src/stm32f1xx_hal_spi.c',
    '../drivers/Src/stm32f1xx_hal_sram.c',
    '../drivers/Src/stm32f1xx_hal_tim_ex.c',
    '../drivers/Src/stm32f1xx_hal_tim.c',
    '../drivers/Src/stm32f1xx_hal.c',
    '../drivers/Src/stm32f4xx_ll_fmc.c',
    '../drivers/Src/stm32f4xx_ll_sdmmc.c',
    '../drivers/Src/stm32f4xx_ll_usb.c',
]

SOURCE_BOARDLOADER = [
    '../loader/startup.s',
    '../loader/lowlevel.c',
    '../loader/main.c',
]

SOURCE_HAL = [
    '../loader/common.c',
    '../loader/image.c',
    '../loader/flash.c',
    '../loader/stm32.c',
    '../loader/util.s',
    '../loader/vectortable.s',
]

env = Environment(ENV=os.environ, CFLAGS='%s -DPRODUCTION=%s' % (ARGUMENTS.get('CFLAGS', ''), ARGUMENTS.get('PRODUCTION', '0')))

env.Replace(
    AS='arm-none-eabi-as',
    AR='arm-none-eabi-ar',
    CC='arm-none-eabi-gcc',
    LINK='arm-none-eabi-gcc',
    SIZE='arm-none-eabi-size',
    STRIP='arm-none-eabi-strip',
    OBJCOPY='arm-none-eabi-objcopy', )

env.Replace(
    TREZOR_MODEL=env.get('ENV').get('TREZOR_MODEL', 'T'), )

if env.get('TREZOR_MODEL') == 'T':
    CPU_ASFLAGS = '-mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16'
    CPU_CCFLAGS = '-mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mtune=cortex-m4 '
    CPU_MODEL   = 'STM32F427xx'
else:
    CPU_ASFLAGS = '-mthumb -mcpu=cortex-m3 -mfloat-abi=soft'
    CPU_CCFLAGS = '-mthumb -mtune=cortex-m3 -mcpu=cortex-m3 -mfloat-abi=soft '
    CPU_MODEL   = 'STM32F405xx'

env.Replace(
    COPT=env.get('ENV').get('OPTIMIZE', '-Os'),
    CCFLAGS='$COPT '
    '-g3 '
    '-nostdlib '
    '-std=gnu99 -Wall -Werror -Wdouble-promotion -Wpointer-arith -fno-common '
    '-fsingle-precision-constant -fdata-sections -ffunction-sections '
    '-ffreestanding '
    '-fstack-protector-all '
    + CPU_CCFLAGS + CCFLAGS_MOD,
    CCFLAGS_QSTR='-DNO_QSTR -DN_X64 -DN_X86 -DN_THUMB',
    LINKFLAGS='-T ../loader/memory.ld -Wl,--gc-sections -Wl,-Map=build/boardloader/boardloader.map -Wl,--warn-common',
    CPPPATH=[
        'embed/boardloader',
        'embed/trezorhal',
        'embed/extmod/modtrezorui',
        'vendor/micropython/stmhal',
        'vendor/micropython/ports/stm32',
        '../drivers/Inc',
        'vendor/micropython/lib/stm32lib/CMSIS/STM32F4xx/Include',
        'vendor/micropython/lib/cmsis/inc',
    ] + CPPPATH_MOD,
    CPPDEFINES=[
        ('TREZOR_MODEL', '$TREZOR_MODEL'),
        CPU_MODEL,
        'USE_HAL_DRIVER',
        ('STM32_HAL_H', '"<stm32f4xx.h>"'),
    ] + CPPDEFINES_MOD,
    ASFLAGS=CPU_ASFLAGS,
    ASPPFLAGS='$CFLAGS $CCFLAGS', )

#
# Program objects
#

obj_program = []
obj_program += env.Object(source=SOURCE_MOD)
obj_program += env.Object(source=SOURCE_BOARDLOADER)
obj_program += env.Object(source=SOURCE_STMHAL)
obj_program += env.Object(source=SOURCE_HAL)

program_elf = env.Command(
    target='boardloader.elf',
    source=obj_program,
    action=
    '$LINK -o $TARGET $CCFLAGS $CFLAGS $LINKFLAGS $SOURCES -lc_nano -lgcc',
)

program_bin = env.Command(
    target='boardloader.bin',
    source=program_elf,
    action='$OBJCOPY -O binary $SOURCE $TARGET',
)
